---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: alertmanager
  namespace: monitoring
spec:
  interval: 1h
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: alertmanager
      version: 0.24.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  values:
    ingress:
      enabled: true
      className: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-method: GET
        nginx.ingress.kubernetes.io/auth-url: http://stupid-auth.security.svc.cluster.local:8000/auth
        nginx.ingress.kubernetes.io/auth-signin: https://auth.${SECRET_DOMAIN}/login?rd=$scheme://$best_http_host$request_uri 
        nginx.ingress.kubernetes.io/auth-response-headers: Remote-User,Remote-Name,Remote-Groups,Remote-Email
        nginx.ingress.kubernetes.io/auth-snippet: proxy_set_header X-Forwarded-Method $request_method;
        hajimari.io/appName: "Alert Manager"
        hajimari.io/icon: mdi:alert-decagram-outline
      hosts:
        - host: alert-manager.${SECRET_DOMAIN}
          paths:
            - path: /
              pathType: Prefix
      tls:
        - hosts:
            - alert-manager.${SECRET_DOMAIN}
    replicaCount: 3
    persistence:
      enabled: true
      storageClass: local-path
      size: 1Gi
    config:
      global:
        resolve_timeout: 5m
      receivers:
        - name: "null"
        - name: "pushover"
          pushover_configs:
            - url_title: View in Alert Manager
              token: "${SECRET_ALERTMANAGER_PUSHOVER_TOKEN}"
              user_key: "${SECRET_ALERTMANAGER_PUSHOVER_USER_KEY}"
              send_resolved: true
              html: true
              sound: gamelan
              priority: |-
                {{ if eq .Status "firing" }}1{{ else }}0{{ end }}
              title: |-
                [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }}
              message: |-
                {{- range .Alerts }}
                  {{- if ne .Labels.severity "" }}
                    <b>Severity:</b> <i>{{ .Labels.severity }}</i>
                  {{- else }}
                    <b>Severity:</b> <i>N/A</i>
                  {{- end }}
                  {{- if ne .Annotations.description "" }}
                    <b>Description:</b> <i>{{ .Annotations.description }}</i>
                  {{- else if ne .Annotations.summary "" }}
                    <b>Summary:</b> <i>{{ .Annotations.summary }}</i>
                  {{- else if ne .Annotations.message "" }}
                    <b>Message:</b> <i>{{ .Annotations.message }}</i>
                  {{- else }}
                    <b>Description:</b> <i>N/A</i>
                  {{- end }}
                  {{- if gt (len .Labels.SortedPairs) 0 }}
                    <b>Details:</b>
                    {{- range .Labels.SortedPairs }}
                      â€¢ <b>{{ .Name }}:</b> <i>{{ .Value }}</i>
                    {{- end }}
                  {{- end }}
                {{- end }}
      route:
        group_by: ["alertname", "job"]
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 6h
        receiver: "pushover"
        routes:
          - receiver: "null"
            matchers:
              - alertname =~ "InfoInhibitor|Watchdog"
          - receiver: "pushover"
            matchers:
              - severity = "critical"
            continue: true
      inhibit_rules:
        - source_matchers:
            - severity = "critical"
          target_matchers:
            - severity = "warning"
          equal: ["alertname", "namespace"]
